#include <msp430.h>

unsigned char TXData[4];//= {0xA1,0xB1,0xC1,0xD1};        // Pointer to TX data
unsigned char SlaveAddress=0x27;
unsigned char TXByteCtr;
unsigned char Flag = 0;

int main(void)
{
    WDTCTL = WDTPW | WDTHOLD;                         // Stop watchdog timer

    // Configure Pins for I2C
    P5SEL0 |= BIT2 | BIT3;                            // I2C pins

    // Disable the GPIO power-on default high-impedance mode
    // to activate previously configured port settings
    PM5CTL0 &= ~LOCKLPM5;

    // Configure USCI_B0 for I2C mode
    UCB0CTLW0 |= UCSWRST;                             // put eUSCI_B in reset state
    UCB0CTLW0 |= UCMODE_3 | UCMST;                    // I2C master mode, SMCLK
    UCB0BRW = 0x8;                                    // baudrate = SMCLK / 8
    UCB0CTLW0 &=~ UCSWRST;                            // clear reset register
    UCB0IE |= UCTXIE0 | UCNACKIE;                     // transmit and NACK interrupt enable
    UCB0I2CSA = SlaveAddress;              // configure slave address


    while(1)
    {
    __delay_cycles(1000);                             // Delay between transmissions

    TXByteCtr = 0;                                    // Load TX byte counter
    while (UCB0CTLW0 & UCTXSTP);                      // Ensure stop condition got sent
    UCB0CTLW0 |= UCTR | UCTXSTT;                      // I2C TX, start condition

    __bis_SR_register(LPM0_bits | GIE);               // Enter LPM0 w/ interrupts
                                                      // Remain in LPM0 until all data
                                                      // is TX'd

    }

}

#if defined(__TI_COMPILER_VERSION__) || defined(__IAR_SYSTEMS_ICC__)
#pragma vector = USCI_B0_VECTOR
__interrupt void USCIB0_ISR(void)
#elif defined(__GNUC__)
void __attribute__ ((interrupt(USCI_B0_VECTOR))) USCIB0_ISR (void)
#else
#error Compiler not supported!
#endif
{
  switch(__even_in_range(UCB0IV,0x1E))
  {
        case USCI_NONE:          break;               // Vector 0: No interrupts break;
        case USCI_I2C_UCALIFG:   break;
        case USCI_I2C_UCNACKIFG:
            UCB0CTL1 |= UCTXSTT;                      //resend start if NACK
          break;                                      // Vector 4: NACKIFG break;
        case USCI_I2C_UCSTTIFG:  break;               // Vector 6: STTIFG break;
        case USCI_I2C_UCSTPIFG:  break;               // Vector 8: STPIFG break;
        case USCI_I2C_UCRXIFG3:  break;               // Vector 10: RXIFG3 break;
        case USCI_I2C_UCTXIFG3:  break;               // Vector 14: TXIFG3 break;
        case USCI_I2C_UCRXIFG2:  break;               // Vector 16: RXIFG2 break;
        case USCI_I2C_UCTXIFG2:  break;               // Vector 18: TXIFG2 break;
        case USCI_I2C_UCRXIFG1:  break;               // Vector 20: RXIFG1 break;
        case USCI_I2C_UCTXIFG1:  break;               // Vector 22: TXIFG1 break;
        case USCI_I2C_UCRXIFG0:  break;               // Vector 24: RXIFG0 break;
        case USCI_I2C_UCTXIFG0:
        if (TXByteCtr<4)                                // Check TX byte counter
           {
            UCB0TXBUF = TXData[Flag++];            // Load TX buffer
            TXByteCtr++;                              // Decrement TX byte counter
           }
        else
           {
            UCB0CTLW0 |= UCTXSTP;                     // I2C stop condition
            UCB0IFG &= ~UCTXIFG;                      // Clear USCI_B0 TX int flag
            Flag=0;
            TXByteCtr=0;
            __bic_SR_register_on_exit(LPM0_bits);     // Exit LPM0
           }
          break;                                      // Vector 26: TXIFG0 break;
        case USCI_I2C_UCBCNTIFG: break;               // Vector 28: BCNTIFG
        case USCI_I2C_UCCLTOIFG: break;               // Vector 30: clock low timeout
        case USCI_I2C_UCBIT9IFG: break;               // Vector 32: 9th bit
        default: break;
  }
}
